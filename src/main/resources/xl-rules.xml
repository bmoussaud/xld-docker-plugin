<?xml version="1.0"?>
<!--

    THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
    FOR A PARTICULAR PURPOSE. THIS CODE AND INFORMATION ARE NOT SUPPORTED BY XEBIALABS.

-->
<!--
    Note: If you modify this file and automatic reloading is disabled in `planner.conf`, you must restart the XL Deploy server.
-->
<rules xmlns="http://www.xebialabs.com/xl-deploy/xl-rules">
    <rule name="docker.RunContainers.Run" scope="plan">
        <planning-script-path>docker/planning/run-containers.py</planning-script-path>
    </rule>

    <rule name="docker.Container.Log" scope="deployed">
        <conditions>
            <type>docker.RunContainer</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.dumpLogsAfterStartup</expression>
        </conditions>
        <steps>
            <wait>
                <order>67</order>
                <description expression="true">"Waiting for 10 seconds"</description>
                <seconds>10</seconds>
            </wait>
            <os-script>
                <description expression="true">"Dump the logs of the container '%s'" % (deployed.name)</description>
                <order>67</order>
                <script>docker/docker-log</script>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.Container.Stop" scope="deployed">
        <conditions>
            <type>docker.RunContainer</type>
            <operation>DESTROY</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Stop the container '%s' (%s)" % (previousDeployed.name, previousDeployed.image)</description>
                <order>35</order>
                <script>docker/docker-stop</script>
                <freemarker-context>
                    <name expression="true">previousDeployed.name</name>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.Container.Remove" scope="deployed">
        <conditions>
            <type>docker.RunContainer</type>
            <operation>DESTROY</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Remove the container '%s' (%s)" % (previousDeployed.name, previousDeployed.image)</description>
                <order>36</order>
                <script>docker/docker-rm</script>
                <freemarker-context>
                    <name expression="true">previousDeployed.name</name>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.pull.image.from.registry" scope="deployed">
        <conditions>
            <type>docker.RunContainer</type>
            <type>smoketest.ExecutedDockerizedHttpRequestTest</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.registryHost is not None</expression>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Pull the image %s (%s) from the registry %s:%s " % (deployed.name, deployed.image,
                    deployed.registryHost, deployed.registryPort)
                </description>
                <order>2</order>
                <script>docker/docker-pull-tag</script>
                <freemarker-context>
                    <registryHost expression="true">deployed.registryHost</registryHost>
                    <registryPort expression="true">deployed.registryPort</registryPort>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.pull.image.from.default.registry" scope="deployed">
        <conditions>
            <type>docker.RunContainer</type>
            <type>smoketest.ExecutedDockerizedHttpRequestTest</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <expression>deployed.registryHost is None</expression>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Pull the image %s (%s) " % (deployed.name, deployed.image)
                </description>
                <order>2</order>
                <script>docker/docker-pull</script>
            </os-script>
        </steps>
    </rule>

    <rule name="smoketest.RunHttpRequest.docker" scope="deployed">
        <conditions>
            <type>smoketest.ExecutedDockerizedHttpRequestTest</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
            <operation>NOOP</operation>
        </conditions>
        <steps>
            <os-script>
                <script>docker/run-command</script>
                <order>102</order>
                <description expression="true">"Run '%s' on %s" % (deployed.name, deployed.container.name)</description>
                <classpath-resources>
                    <value>smoketest/execute-http-request.sh.ftl</value>
                </classpath-resources>
                <target-host expression="true">deployed.container.host</target-host>
                <freemarker-context>
                    <script>smoketest/execute-http-request</script>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>


    <rule name="docker.DataVolume.Create" scope="deployed">
        <conditions>
            <type>docker.DataFileVolume</type>
            <operation>CREATE</operation>
            <operation>MODIFY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Create the '%s' data volume image" % (deployed.name)</description>
                <order>55</order>
                <script>docker/docker-data-image</script>
                <classpath-resources>
                    <value>docker/volume/Dockerfile.ftl</value>
                </classpath-resources>
            </os-script>
            <os-script>
                <description expression="true">"Create the '%s' data volume container" % (deployed.name)</description>
                <order>55</order>
                <script>docker/docker-data-container</script>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.DataVolume.DESTROY" scope="deployed">
        <conditions>
            <type>docker.DataFileVolume</type>
            <operation>MODIFY</operation>
            <operation>DESTROY</operation>
        </conditions>
        <steps>
            <os-script>
                <description expression="true">"Remove the '%s' data volume container" % (previousDeployed.name)</description>
                <order>35</order>
                <script>docker/docker-rm</script>
                <freemarker-context>
                    <name expression="true">previousDeployed.name</name>
                </freemarker-context>
            </os-script>
            <os-script>
                <description expression="true">"Remove the '%s' data volume image" % (previousDeployed.name)</description>
                <order>35</order>
                <script>docker/docker-rmi</script>
                <freemarker-context>
                    <name expression="true">previousDeployed.name</name>
                </freemarker-context>
            </os-script>
        </steps>
    </rule>

    <rule name="docker.stop.start.on.modified.volumes" scope="plan">
        <planning-script-path>docker/planning/start-stop-container-on-modified-volumes.py</planning-script-path>
    </rule>
</rules>
